import AVLTree from '../AVLTree'
describe('AVLTree', () => {
  it('should do simple left-left rotation', () => {
    const tree = new AVLTree()
    tree.insert(3)
    tree.insert(2)
    tree.insert(1)

    expect(tree.toString()).toBe('1,2,3')
    expect(tree.root.value).toBe(2)
    expect(tree.root.height).toBe(1)

    tree.insert(4)
    expect(tree.toString()).toBe('1,2,3,4')
    expect(tree.root.value).toBe(2)
    expect(tree.root.height).toBe(2)

    tree.insert(0)
    expect(tree.toString()).toBe('0,1,2,3,4')
    expect(tree.root.value).toBe(2)
    expect(tree.root.height).toBe(2)
    expect(tree.root.left.value).toBe(1)
  })
  it('should do complex left-left rotation', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(20)
    tree.insert(40)
    tree.insert(10)

    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(2)
    expect(tree.toString()).toBe('10,20,30,40')

    tree.insert(25)
    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(2)

    tree.insert(5)
    expect(tree.root.value).toBe(20)
    expect(tree.root.height).toBe(2)
    expect(tree.root.left.value).toBe(10)
    expect(tree.root.right.value).toBe(30)
    expect(tree.root.right.left.value).toBe(25)
    expect(tree.toString()).toBe('5,10,20,25,30,40')
  })
  it('should do simple right-right rotation', () => {
    const tree = new AVLTree()
    tree.insert(2)
    tree.insert(3)
    tree.insert(4)

    expect(tree.root.value).toBe(3)
    expect(tree.root.height).toBe(1)
    expect(tree.root.left.value).toBe(2)
    expect(tree.root.right.value).toBe(4)

    tree.insert(5)

    expect(tree.root.value).toBe(3)
    expect(tree.root.height).toBe(2)

    tree.insert(6)
    expect(tree.root.value).toBe(3)
    expect(tree.root.height).toBe(2)
    expect(tree.root.left.value).toBe(2)
    expect(tree.root.right.value).toBe(5)
    expect(tree.toString()).toBe('2,3,4,5,6')
  })
  it('should do complex right-right rotation', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(20)
    tree.insert(40)
    tree.insert(50)

    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(2)

    tree.insert(35)
    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(2)

    tree.insert(55)
    expect(tree.root.value).toBe(40)
    expect(tree.root.height).toBe(2)
    expect(tree.root.left.value).toBe(30)
    expect(tree.root.left.right.value).toBe(35)
    expect(tree.root.right.value).toBe(50)
    expect(tree.toString()).toBe('20,30,35,40,50,55')
  })
  it('should do left-right rotation', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(20)
    tree.insert(25)
    expect(tree.root.value).toBe(25)
    expect(tree.root.height).toBe(1)
    expect(tree.toString()).toBe('20,25,30')
  })
  it('should do right-left rotation', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(45)
    tree.insert(35)

    expect(tree.root.value).toBe(35)
    expect(tree.root.height).toBe(1)
    expect(tree.toString()).toBe('30,35,45')
  })
  it('should create balanced tree with negative number', () => {
    const tree = new AVLTree()
    tree.insert(1)
    tree.insert(2)
    tree.insert(3)

    expect(tree.root.value).toBe(2)
    expect(tree.root.height).toBe(1)

    tree.insert(15)
    expect(tree.root.value).toBe(2)
    expect(tree.root.right.value).toBe(3)
    expect(tree.root.height).toBe(2)

    tree.insert(-2)
    tree.insert(-5)
    tree.insert(-8)
    expect(tree.root.value).toBe(2)
    expect(tree.root.height).toBe(3)
    expect(tree.root.left.left.value).toBe(-5)
    expect(tree.toString()).toBe('-8,-5,-2,1,2,3,15')
  })
  it('should do left right rotation and keeping right node safe', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(15)
    tree.insert(40)
    tree.insert(10)
    tree.insert(18)
    tree.insert(35)
    tree.insert(45)
    tree.insert(5)
    tree.insert(12)

    tree.insert(11)

    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(3)
    expect(tree.root.left.value).toBe(12)
    expect(tree.root.right.value).toBe(40)
    expect(tree.toString()).toBe('5,10,11,12,15,18,30,35,40,45')
  })
  it('should de left right rotation and keeping left node safe', () => {
    const tree = new AVLTree()
    tree.insert(30)
    tree.insert(15)
    tree.insert(40)
    tree.insert(10)
    tree.insert(18)
    tree.insert(35)
    tree.insert(45)
    tree.insert(42)
    tree.insert(47)

    tree.insert(43)

    expect(tree.root.value).toBe(30)
    expect(tree.root.height).toBe(3)
    expect(tree.root.left.value).toBe(15)
    expect(tree.root.right.value).toBe(42)
    expect(tree.toString()).toBe('10,15,18,30,35,40,42,43,45,47')
  })
})
